using ComponentArrays, Lux, DiffEqFlux, OrdinaryDiffEq, Optimization, OptimizationOptimJL,
    OptimizationOptimisers, Random, Plots
using Flux

df = XLSX.readxlsx("/Users/tyoon/Desktop/Effects of capsaicin treatment on action potential in mouse DRG neurons/CAP_data_separate/CAP 10/003_CAP 10 before/1x Rheobase.xlsx")
data = df[1][:]
V = reshape(data[500:2000, 2] * 1000, 1, :)
tt = reshape(collect(LinRange(0, 30, 1501)), 1, :)

tsapn=(0.0,30.0)

rng = Random.default_rng()
u0 = [0.5,0.06,0.5,0.1, -55]

eNa = 61.5 * log(140 / 10)
eK = 61.5 * log(5 / 126)
eCa = 61.5 * log(12 / 10)
eL = 61.5 * log(151 / 12)
gNa = 67.15
gK = 8.91
gCa = 33.97
gL = 4.05

p = [gNa, gK, gCa, gL, eNa, eK, eCa, eL, 0]  # I is set to 0 for now

function VDChannel(du, u, p, t)
    gNa, gK, gCa, gL, eNa, eK, eCa, eL, I = p
    du[1] = ((2.5 - 0.1 * (u[5] + 0.0)) / (exp(2.5 - 0.1 * (u[5] + 0.0)) - 1))*(1-u[1]) - (4.4 * exp(-(u[5] + 0.0) / 18)) * u[1]
    du[2] = (0.6 * exp(-(u[5] + 0.0) / 20))*(1-u[2]) - (1 / (exp(3.0 - 0.1 * (u[5] + 0.0)) + 1))*u[2]
    du[3] = ((0.1 - 0.01 * (u[5] + 0.0)) / (exp(1 - 0.1 * (u[5] + 0.0)) - 1))*(1-u[3]) - (0.125 * exp(-(u[5] + 0.0) / 80))*u[3]
    du[4] = ((1 / (1+exp(-(u[5]+55)/3)))-u[4])/(17*exp((-(u[5]+45).^2)/600)+1.5)
    du[5] = (gNa * u[1]^3 * u[2] * (eNa - (u[5] + 0.0)) + gK * u[3]^4 * (eK - (u[5] + 0.0)) + gCa * u[4] * (eCa - (u[5] + 0.0)) + gL * (eL - (u[5] + 0.0)) + I)
end

# prob_trueode = ODEProblem(VDChannel, u0, tspan, p, tstops=tt)
# ode_data = Array(solve(prob_trueode, Tsit5(); saveat = tsteps))

chain = Lux.Chain(
    Lux.Dense(5, n, Lux.σ),
    Lux.Dense(n, n, Lux.σ),
    Lux.Dense(n, n, Lux.σ),
    Lux.Dense(n, 5)
)
ps, st = Lux.setup(rng, chain) |> Lux.f64

prob_neuralode = NeuralODE(chain, tspan, Tsit5(); saveat = tsteps)

function predict_neuralode(ps)
    Array(prob_neuralode(u0, ps, st)[1])
end

function loss_neuralode(ps)
    pred = predict_neuralode(ps)
    loss = sum(abs2, V .- pred)
    return loss, pred
end

# Do not plot by default for the documentation
# Users should change doplot=true to see the plots callbacks
callback = function (ps, l, pred; doplot = false)
    println(l)
    # plot current prediction against data
    if doplot
        plt = scatter(tsteps, V[1, :]; label = "data")
        scatter!(plt, tsteps, pred[1, :]; label = "prediction")
        display(plot(plt))
    end
    return false
end

pinit = ComponentArray(ps)
callback(pinit, loss_neuralode(pinit)...; doplot = true)

# use Optimization.jl to solve the problem
adtype = Optimization.AutoZygote()

optf = Optimization.OptimizationFunction((x, ps) -> loss_neuralode(x), adtype)
optprob = Optimization.OptimizationProblem(optf, pinit)

result_neuralode = Optimization.solve(optprob, OptimizationOptimisers.Adam(0.05); callback = callback,
    maxiters = 300)

optprob2 = remake(optprob; u0 = result_neuralode.u)

result_neuralode2 = Optimization.solve(optprob2, Optim.BFGS(; initial_stepnorm = 0.01);
    callback, allow_f_increases = false)

callback(result_neuralode2.u, loss_neuralode(result_neuralode2.u)...; doplot = true)
